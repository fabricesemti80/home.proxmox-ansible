---
- name: Create tokens directory
  file:
    path: "{{ playbook_dir }}/{{ token_storage.directory }}"
    state: directory
    mode: "0755"
  delegate_to: localhost
  become: false
  run_once: true

- name: Check if tokens exist in Proxmox
  command: >
    pvesh get /access/users/{{ item.user }}/token/{{ item.token_name }}
  register: token_exists_check
  loop: "{{ api_tokens }}"
  failed_when: false
  changed_when: false
  run_once: true

- name: Generate API tokens and capture secrets
  shell: |
    # Create the token and capture the output which contains the secret
    OUTPUT=$(pvesh create /access/users/{{ item.item.user }}/token/{{ item.item.token_name }} \
      --comment "{{ item.item.comment }}" \
      --expire {{ item.item.expire }} \
      --privsep {{ item.item.privsep }} 2>&1)

    # Extract the token secret from the output
    # The secret is typically shown in the creation output
    echo "$OUTPUT" | grep -o '[a-f0-9]\{8\}-[a-f0-9]\{4\}-[a-f0-9]\{4\}-[a-f0-9]\{4\}-[a-f0-9]\{12\}' || echo "TOKEN_SECRET_NOT_FOUND"
  register: token_create_result
  loop: "{{ token_exists_check.results }}"
  when: item.rc != 0 # Token doesn't exist
  failed_when: token_create_result.rc != 0 and 'already exists' not in token_create_result.stderr
  changed_when: token_create_result.rc == 0
  run_once: true

- name: Create token secret files
  copy:
    content: |
      # {{ item.item.item.user }} API Token
      # Generated: {{ ansible_date_time.iso8601 }}
      # Token ID: {{ item.item.item.user }}!{{ item.item.item.token_name }}
      # Proxmox URL: https://{{ hostvars[groups['pve01'][0]]['ansible_host'] }}:8006/api2/json

      TOKEN_SECRET={{ item.stdout | trim }}
      TOKEN_ID={{ item.item.item.user }}!{{ item.item.item.token_name }}
      PROXMOX_URL=https://{{ hostvars[groups['pve01'][0]]['ansible_host'] }}:8006/api2/json
      PROXMOX_NODE={{ groups['pve01'][0] | regex_replace('\\..*', '') }}
    dest: "{{ playbook_dir }}/{{ token_storage.directory }}/{{ item.item.item.user }}-{{ item.item.item.token_name }}.token"
    mode: "{{ token_storage.file_mode }}"
  loop: "{{ token_create_result.results }}"
  when: item is not skipped and item.stdout is defined and 'TOKEN_SECRET_NOT_FOUND' not in item.stdout
  delegate_to: localhost
  become: false
  run_once: true

- name: Create Packer configuration file
  template:
    src: packer_config.pkr.hcl.j2
    dest: "{{ playbook_dir }}/{{ token_storage.directory }}/packer-config.pkr.hcl"
    mode: "{{ token_storage.file_mode }}"
  delegate_to: localhost
  become: false
  run_once: true

- name: Create Terraform configuration file
  template:
    src: terraform_config.tf.j2
    dest: "{{ playbook_dir }}/{{ token_storage.directory }}/terraform-config.tf"
    mode: "{{ token_storage.file_mode }}"
  delegate_to: localhost
  become: false
  run_once: true

- name: Display token information
  debug:
    msg: |
      API Tokens have been generated and stored in: {{ playbook_dir }}/{{ token_storage.directory }}/

      Files created:
      {% for token in api_tokens %}
      - {{ token.user }}-{{ token.token_name }}.token (raw token data)
      {% endfor %}
      - packer-config.pkr.hcl (Packer configuration)
      - terraform-config.tf (Terraform configuration)

      IMPORTANT: 
      - These files contain sensitive API tokens
      - They are excluded from git via .gitignore
      - Keep them secure and do not share publicly

      Token format: {{ ansible_host }}:8006
      Username format: user@pam!token_name
  run_once: true
